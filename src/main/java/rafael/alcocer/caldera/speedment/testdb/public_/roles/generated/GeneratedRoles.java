package rafael.alcocer.caldera.speedment.testdb.public_.roles.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.IntField;
import com.speedment.runtime.field.StringField;
import com.speedment.runtime.typemapper.TypeMapper;
import rafael.alcocer.caldera.speedment.testdb.public_.roles.Roles;

import java.util.Optional;

/**
 * The generated base for the {@link
 * rafael.alcocer.caldera.speedment.testdb.public_.roles.Roles}-interface
 * representing entities of the {@code roles}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedRoles {
    
    /**
     * This Field corresponds to the {@link Roles} field that can be obtained
     * using the {@link Roles#getId()} method.
     */
    IntField<Roles, Integer> ID = IntField.create(
        Identifier.ID,
        Roles::getId,
        Roles::setId,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link Roles} field that can be obtained
     * using the {@link Roles#getName()} method.
     */
    StringField<Roles, String> NAME = StringField.create(
        Identifier.NAME,
        o -> OptionalUtil.unwrap(o.getName()),
        Roles::setName,
        TypeMapper.identity(),
        false
    );
    
    /**
     * Returns the id of this Roles. The id field corresponds to the database
     * column testdb.public.roles.id.
     * 
     * @return the id of this Roles
     */
    int getId();
    
    /**
     * Returns the name of this Roles. The name field corresponds to the
     * database column testdb.public.roles.name.
     * 
     * @return the name of this Roles
     */
    Optional<String> getName();
    
    /**
     * Sets the id of this Roles. The id field corresponds to the database
     * column testdb.public.roles.id.
     * 
     * @param id to set of this Roles
     * @return   this Roles instance
     */
    Roles setId(int id);
    
    /**
     * Sets the name of this Roles. The name field corresponds to the database
     * column testdb.public.roles.name.
     * 
     * @param name to set of this Roles
     * @return     this Roles instance
     */
    Roles setName(String name);
    
    enum Identifier implements ColumnIdentifier<Roles> {
        
        ID   ("id"),
        NAME ("name");
        
        private final String columnId;
        private final TableIdentifier<Roles> tableIdentifier;
        
        Identifier(String columnId) {
            this.columnId        = columnId;
            this.tableIdentifier = TableIdentifier.of(    getDbmsId(), 
                getSchemaId(), 
                getTableId());
        }
        
        @Override
        public String getDbmsId() {
            return "testdb";
        }
        
        @Override
        public String getSchemaId() {
            return "public";
        }
        
        @Override
        public String getTableId() {
            return "roles";
        }
        
        @Override
        public String getColumnId() {
            return this.columnId;
        }
        
        @Override
        public TableIdentifier<Roles> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
}