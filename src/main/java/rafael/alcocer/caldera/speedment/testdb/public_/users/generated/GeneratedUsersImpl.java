package rafael.alcocer.caldera.speedment.testdb.public_.users.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.runtime.core.util.OptionalUtil;
import rafael.alcocer.caldera.speedment.testdb.public_.users.Users;

import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;

/**
 * The generated base implementation of the {@link
 * rafael.alcocer.caldera.speedment.testdb.public_.users.Users}-interface.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public abstract class GeneratedUsersImpl implements Users {
    
    private long id;
    private String email;
    private String password;
    private String username;
    
    protected GeneratedUsersImpl() {}
    
    @Override
    public long getId() {
        return id;
    }
    
    @Override
    public Optional<String> getEmail() {
        return Optional.ofNullable(email);
    }
    
    @Override
    public Optional<String> getPassword() {
        return Optional.ofNullable(password);
    }
    
    @Override
    public Optional<String> getUsername() {
        return Optional.ofNullable(username);
    }
    
    @Override
    public Users setId(long id) {
        this.id = id;
        return this;
    }
    
    @Override
    public Users setEmail(String email) {
        this.email = email;
        return this;
    }
    
    @Override
    public Users setPassword(String password) {
        this.password = password;
        return this;
    }
    
    @Override
    public Users setUsername(String username) {
        this.username = username;
        return this;
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("id = "       + Objects.toString(getId()));
        sj.add("email = "    + Objects.toString(OptionalUtil.unwrap(getEmail())));
        sj.add("password = " + Objects.toString(OptionalUtil.unwrap(getPassword())));
        sj.add("username = " + Objects.toString(OptionalUtil.unwrap(getUsername())));
        return "UsersImpl " + sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Users)) { return false; }
        final Users thatUsers = (Users)that;
        if (this.getId() != thatUsers.getId()) { return false; }
        if (!Objects.equals(this.getEmail(), thatUsers.getEmail())) { return false; }
        if (!Objects.equals(this.getPassword(), thatUsers.getPassword())) { return false; }
        if (!Objects.equals(this.getUsername(), thatUsers.getUsername())) { return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Long.hashCode(getId());
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getEmail()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getPassword()));
        hash = 31 * hash + Objects.hashCode(OptionalUtil.unwrap(getUsername()));
        return hash;
    }
}